= "childList") {
          // If there has been removals, flash the parent
          if (removed.length) {
            removedContainers.add(container);
          }

          // If there has been additions, flash the nodes if their associated
          // container exist (so if their parent is expanded in the inspector).
          added.forEach(node => {
            const addedContainer = this.getContainer(node);
            if (addedContainer) {
              addedOrEditedContainers.add(addedContainer);

              // The node may be added as a result of an append, in which case
              // it will have been removed from another container first, but in
              // these cases we don't want to flash both the removal and the
              // addition
              removedContainers.delete(container);
            }
          });
        }
      }
    }

    for (const container of removedContainers) {
      container.flashMutation();
    }
    for (const container of addedOrEditedContainers) {
      container.flashMutation();
    }
  },

  /**
   * Make sure the given node's parents are expanded and the
   * node is scrolled on to screen.
   */
  showNode: function(
    node,
    { centered = true, slotted, smoothScroll = false } = {}
  ) {
    if (slotted && !this.hasContainer(node, slotted)) {
      throw new Error("Tried to show a slotted node not previously imported");
    } else {
      this._ensureNodeImported(node);
    }

    return this._waitForChildren()
      .then(() => {
        if (this._destroyed) {
          return promise.reject("markupview destroyed");
        }
        return this._ensureVisible(node);
      })
      .then(() => {
        const container = this.getContainer(node, slotted);
        scrollIntoViewIfNeeded(container.editor.elt, centered, smoothScroll);
      }, this._handleRejectionIfNotDestroyed);
  },

  _ensureNodeImported: function(node) {
    let parent = node;

    this.importNode(node);

    while ((parent = this._getParentInTree(parent))) {
      this.importNode(parent);
      this.expandNode(parent);
    }
  },

  /**
   * Expand the container's children.
   */
  _expandContainer: function(container) {
    return this._updateChildren(container, { expand: true }).then(() => {
      if (this._destroyed) {
        // Could not expand the node, the markup-view was destroyed in the meantime. Just
        // silently give up.
        return;
      }
      container.setExpanded(true);
    });
  },

  /**
   * Expand the node's children.
   */
  expandNode: function(node) {
    const container = this.getContainer(node);
    return this._expandContainer(container);
  },

  /**
   * Expand the entire tree beneath a container.
   *
   * @param  {MarkupContainer} container
   *         The container to expand.
   */
  _expandAll: function(container) {
    return this._expandContainer(container)
      .then(() => {
        let child = container.children.firstChild;
        const promises = [];
        while (child) {
          promises.push(this._expandAll(child.container));
          child = child.nextSibling;
        }
        return promise.all(promises);
      })
      .catch(console.error);
  },

  /**
   * Expand the entire tree beneath a node.
   *
   * @param  {DOMNode} node
   *         The node to expand, or null to start from the top.
   * @return {Promise} promise that resolves once all children are expanded.
   */
  expandAll: function(node) {
    node = node || this._rootNode;
    return this._expandAll(this.getContainer(node));
  },

  /**
   * Collapse the node's children.
   */
  collapseNode: function(node) {
    const container = this.getContainer(node);
    container.setExpanded(false);
  },

  _collapseAll: function(container) {
    container.setExpanded(false);
    const children = container.getChildContainers() || [];
    children.forEach(child => this._collapseAll(child));
  },

  /**
   * Collapse the entire tree beneath a node.
   *
   * @param  {DOMNode} node
   *         The node to collapse.
   * @return {Promise} promise that resolves once all children are collapsed.
   */
  collapseAll: function(node) {
    this._collapseAll(this.getContainer(node));

    // collapseAll is synchronous, return a promise for consistency with expandAll.
    return Promise.resolve();
  },

  /**
   * Returns either the innerHTML or the outerHTML for a remote node.
   *
   * @param  {NodeFront} node
   *         The NodeFront to get the outerHTML / innerHTML for.
   * @param  {Boolean} isOuter
   *         If true, makes the function return the outerHTML,
   *         otherwise the innerHTML.
   * @return {Promise} that will be resolved with the outerHTML / innerHTML.
   */
  _getNodeHTML: function(node, isOuter) {
    let walkerPromise = null;

    if (isOuter) {
      walkerPromise = node.walkerFront.outerHTML(node);
    } else {
      walkerPromise = node.walkerFront.innerHTML(node);
    }

    return getLongString(walkerPromise);
  },

  /**
   * Retrieve the outerHTML for a remote node.
   *
   * @param  {NodeFront} node
   *         The NodeFront to get the outerHTML for.
   * @return {Promise} that will be resolved with the outerHTML.
   */
  getNodeOuterHTML: function(node) {
    return this._getNodeHTML(node, true);
  },

  /**
   * Retrieve the innerHTML for a remote node.
   *
   * @param  {NodeFront} node
   *         The NodeFront to get the innerHTML for.
   * @return {Promise} that will be resolved with the innerHTML.
   */
  getNodeInnerHTML: function(node) {
    return this._getNodeHTML(node);
  },

  /**
   * Listen to mutations, expect a given node to be removed and try and select
   * the node that sits at the same place instead.
   * This is useful when changing the outerHTML or the tag name so that the
   * newly inserted node gets selected instead of the one that just got removed.
   */
  reselectOnRemoved: function(removedNode, reason) {
    // Only allow one removed node reselection at a time, so that when there are
    // more than 1 request in parallel, the last one wins.
    this.cancelReselectOnRemoved();

    // Get the removedNode index in its parent node to reselect the right node.
    const isHTMLTag = removedNode.tagName.toLowerCase() === "html";
    const oldContainer = this.getContainer(removedNode);
    const parentContainer = this.getContainer(removedNode.parentNode());
    const childIndex = parentContainer
      .getChildContainers()
      .indexOf(oldContainer);

    const onMutations = (this._removedNodeObserver = mutations => {
      let isNodeRemovalMutation = false;
      for (const mutation of mutations) {
        const containsRemovedNode =
          mutation.removed && mutation.removed.some(n => n === removedNode);
        if (
          mutation.type === "childList" &&
          (containsRemovedNode || isHTMLTag)
        ) {
          isNodeRemovalMutation = true;
          break;
        }
      }
      if (!isNodeRemovalMutation) {
        return;
      }

      this.inspector.off("markupmutation", onMutations);
      this._removedNodeObserver = null;

      // Don't select the new node if the user has already changed the current
      // selection.
      if (
        this.inspector.selection.nodeFront === parentContainer.node ||
        (this.inspector.selection.nodeFront === removedNode && isHTMLTag)
      ) {
        const childContainers = parentContainer.getChildContainers();
        if (childContainers?.[childIndex]) {
          const childContainer = childContainers[childIndex];
          this._markContainerAsSelected(childContainer, reason);
          if (childContainer.hasChildren) {
            this.expandNode(childContainer.node);
          }
          this.emit("reselectedonremoved");
        }
      }
    });

    // Start listening for mutations until we find a childList change that has
    // removedNode removed.
    this.inspector.on("markupmutation", onMutations);
  },

  /**
   * Make sure to stop listening for node removal markupmutations and not
   * reselect the corresponding node when that happens.
   * Useful when the outerHTML/tagname edition failed.
   */
  cancelReselectOnRemoved: function() {
    if (this._removedNodeObserver) {
      this.inspector.off("markupmutation", this._removedNodeObserver);
      this._removedNodeObserver = null;
      this.emit("canceledreselectonremoved");
    }
  },

  /**
   * Replace the outerHTML of any node displayed in the inspector with
   * some other HTML code
   *
   * @param  {NodeFront} node
   *         Node which outerHTML will be replaced.
   * @param  {String} newValue
   *         The new outerHTML to set on the node.
   * @param  {String} oldValue
   *         The old outerHTML that will be used if the user undoes the update.
   * @return {Promise} that will resolve when the outer HTML has been updated.
   */
  updateNodeOuterHTML: function(node, newValue) {
    const container = this.getContainer(node);
    if (!container) {
      return promise.reject();
    }

    // Changing the outerHTML removes the node which outerHTML was changed.
    // Listen to this removal to reselect the right node afterwards.
    this.reselectOnRemoved(node, "outerhtml");
    return node.walkerFront.setOuterHTML(node, newValue).catch(() => {
      this.cancelReselectOnRemoved();
    });
  },

  /**
   * Replace the innerHTML of any node displayed in the inspector with
   * some other HTML code
   * @param  {Node} node
   *         node which innerHTML will be replaced.
   * @param  {String} newValue
   *         The new innerHTML to set on the node.
   * @param  {String} oldValue
   *         The old innerHTML that will be used if the user undoes the update.
   * @return {Promise} that will resolve when the inner HTML has been updated.
   */
  updateNodeInnerHTML: function(node, newValue, oldValue) {
    const container = this.getContainer(node);
    if (!container) {
      return promise.reject();
    }

    return new Promise((resolve, reject) => {
      container.undo.do(
        () => {
          node.walkerFront.setInnerHTML(node, newValue).then(resolve, reject);
        },
        () => {
          node.walkerFront.setInnerHTML(node, oldValue);
        }
      );
    });
  },

  /**
   * Insert adjacent HTML to any node displayed in the inspector.
   *
   * @param  {NodeFront} node
   *         The reference node.
   * @param  {String} position
   *         The position as specified for Element.insertAdjacentHTML
   *         (i.e. "beforeBegin", "afterBegin", "beforeEnd", "afterEnd").
   * @param  {String} newValue
   *         The adjacent HTML.
   * @return {Promise} that will resolve when the adjacent HTML has
   *         been inserted.
   */
  insertAdjacentHTMLToNode: function(node, position, value) {
    const container = this.getContainer(node);
    if (!container) {
      return promise.reject();
    }

    let injectedNodes = [];

    return new Promise((resolve, reject) => {
      container.undo.do(
        () => {
          // eslint-disable-next-line no-unsanitized/method
          node.walkerFront
            .insertAdjacentHTML(node, position, value)
            .then(nodeArray => {
              injectedNodes = nodeArray.nodes;
              return nodeArray;
            })
            .then(resolve, reject);
        },
        () => {
          node.walkerFront.removeNodes(injectedNodes);
        }
      );
    });
  },

  /**
   * Open an editor in the UI to allow editing of a node's html.
   *
   * @param  {NodeFront} node
   *         The NodeFront to edit.
   */
  beginEditingHTML: function(node) {
    // We use outer html for elements, but inner html for fragments.
    const isOuter = node.nodeType == nodeConstants.ELEMENT_NODE;
    const html = isOuter
      ? this.getNodeOuterHTML(node)
      : this.getNodeInnerHTML(node);
    html.then(oldValue => {
      const container = this.getContainer(node);
      if (!container) {
        return;
      }
      // Load load and create HTML Editor as it is rarely used and fetch complex deps
      if (!this.htmlEditor) {
        const HTMLEditor = require("devtools/client/inspector/markup/views/html-editor");
        this.htmlEditor = new HTMLEditor(this.doc);
      }
      this.htmlEditor.show(container.tagLine, oldValue);
      const start = this.telemetry.msSystemNow();
      this.htmlEditor.once("popuphidden", (commit, value) => {
        // Need to focus the <html> element instead of the frame / window
        // in order to give keyboard focus back to doc (from editor).
        this.doc.documentElement.focus();

        if (commit) {
          if (isOuter) {
            this.updateNodeOuterHTML(node, value, oldValue);
          } else {
            this.updateNodeInnerHTML(node, value, oldValue);
          }
        }

        const end = this.telemetry.msSystemNow();
        this.telemetry.recordEvent("edit_html", "inspector", null, {
          made_changes: commit,
          time_open: end - start,
          session_id: this.toolbox.sessionId,
        });
      });

      this.emit("begin-editing");
    });
  },

  /**
   * Expand or collapse the given node.
   *
   * @param  {NodeFront} node
   *         The NodeFront to update.
   * @param  {Boolean} expanded
   *         Whether the node should be expanded/collapsed.
   * @param  {Boolean} applyToDescendants
   *         Whether all descendants should also be expanded/collapsed
   */
  setNodeExpanded: function(node, expanded, applyToDescendants) {
    if (expanded) {
      if (applyToDescendants) {
        this.expandAll(node);
      } else {
        this.expandNode(node);
      }
    } else if (applyToDescendants) {
      this.collapseAll(node);
    } else {
      this.collapseNode(node);
    }
  },

  /**
   * Mark the given node selected, and update the inspector.selection
   * object's NodeFront to keep consistent state between UI and selection.
   *
   * @param  {NodeFront} aNode
   *         The NodeFront to mark as selected.
   * @param  {String} reason
   *         The reason for marking the node as selected.
   * @return {Boolean} False if the node is already marked as selected, true
   *         otherwise.
   */
  markNodeAsSelected: function(node, reason = "nodeselected") {
    const container = this.getContainer(node);
    return this._markContainerAsSelected(container);
  },

  _markContainerAsSelected: function(container, reason) {
    if (!container || this._selectedContainer === container) {
      return false;
    }

    const { node } = container;

    // Un-select and remove focus from the previous container.
    if (this._selectedContainer) {
      this._selectedContainer.selected = false;
      this._selectedContainer.clearFocus();
    }

    // Select the new container.
    this._selectedContainer = container;
    if (node) {
      this._selectedContainer.selected = true;
    }

    // Change the current selection if needed.
    if (!this._isContainerSelected(this._selectedContainer)) {
      const isSlotted = container.isSlotted();
      this.inspector.selection.setNodeFront(node, { reason, isSlotted });
    }

    return true;
  },

  /**
   * Make sure that every ancestor of the selection are updated
   * and included in the list of visible children.
   */
  _ensureVisible: function(node) {
    while (node) {
      const container = this.getContainer(node);
      const parent = this._getParentInTree(node);
      if (!container.elt.parentNode) {
        const parentContainer = this.getContainer(parent);
        if (parentContainer) {
          this._forceUpdateChildren(parentContainer, { expand: true });
        }
      }

      node = parent;
    }
    return this._waitForChildren();
  },

  /**
   * Unmark selected node (no node selected).
   */
  unmarkSelectedNode: function() {
    if (this._selectedContainer) {
      this._selectedContainer.selected = false;
      this._selectedContainer = null;
    }
  },

  /**
   * Check if the current selection is a descendent of the container.
   * if so, make sure it's among the visible set for the container,
   * and set the dirty flag if needed.
   *
   * @return The node that should be made visible, if any.
   */
  _checkSelectionVisible: function(container) {
    let centered = null;
    let node = this.inspector.selection.nodeFront;
    while (node) {
      if (this._getParentInTree(node) === container.node) {
        centered = node;
        break;
      }
      node = this._getParentInTree(node);
    }

    return centered;
  },

  _forceUpdateChildren: async function(container, options = {}) {
    const { flash, updateLevel, expand } = options;

    // Set childrenDirty to true to force fetching new children.
    container.childrenDirty = true;

    // Update the children to take care of changes in the markup view DOM
    await this._updateChildren(container, { expand, flash });

    if (updateLevel) {
      // Update container (and its subtree) DOM tree depth level for
      // accessibility where necessary.
      container.updateLevel();
    }
  },

  /**
   * Make sure all children of the given container's node are
   * imported and attached to the container in the right order.
   *
   * Children need to be updated only in the following circumstances:
   * a) We just imported this node and have never seen its children.
   *    container.childrenDirty will be set by importNode in this case.
   * b) We received a childList mutation on the node.
   *    container.childrenDirty will be set in that case too.
   * c) We have changed the selection, and the path to that selection
   *    wasn't loaded in a previous children request (because we only
   *    grab a subset).
   *    container.childrenDirty should be set in that case too!
   *
   * @param  {MarkupContainer} container
   *         The markup container whose children need updating
   * @param  {Object} options
   *         Options are {expand:boolean,flash:boolean}
   * @return {Promise} that will be resolved when the children are ready
   *         (which may be immediately).
   */
  _updateChildren: function(container, options) {
    // Slotted containers do not display any children.
    if (container.isSlotted()) {
      return promise.resolve(container);
    }

    const expand = options?.expand;
    const flash = options?.flash;

    container.hasChildren = container.node.hasChildren;
    // Accessibility should either ignore empty children or semantically
    // consider them a group.
    container.setChildrenRole();

    if (!this._queuedChildUpdates) {
      this._queuedChildUpdates = new Map();
    }

    if (this._queuedChildUpdates.has(container)) {
      return this._queuedChildUpdates.get(container);
    }

    if (!container.childrenDirty) {
      return promise.resolve(container);
    }

    if (
      container.inlineTextChild &&
      container.inlineTextChild != container.node.inlineTextChild
    ) {
      // This container was doing double duty as a container for a single
      // text child, back that out.
      this._containers.delete(container.inlineTextChild);
      container.clearInlineTextChild();

      if (container.hasChildren && container.selected) {
        container.setExpanded(true);
      }
    }

    if (container.node.inlineTextChild) {
      container.setExpanded(false);
      // this container will do double duty as the container for the single
      // text child.
      while (container.children.firstChild) {
        container.children.firstChild.remove();
      }

      container.setInlineTextChild(container.node.inlineTextChild);

      this.setContainer(container.node.inlineTextChild, container);
      container.childrenDirty = false;
      return promise.resolve(container);
    }

    if (!container.hasChildren) {
      while (container.children.firstChild) {
        container.children.firstChild.remove();
      }
      container.childrenDirty = false;
      container.setExpanded(false);
      return promise.resolve(container);
    }

    // If we're not expanded (or asked to update anyway), we're done for
    // now.  Note that this will leave the childrenDirty flag set, so when
    // expanded we'll refresh the child list.
    if (!(container.expanded || expand)) {
      return promise.resolve(container);
    }

    // We're going to issue a children request, make sure it includes the
    // centered node.
    const centered = this._checkSelectionVisible(container);

    // Children aren't updated yet, but clear the childrenDirty.0833394
205,788.121,1,4.46079,23.9333,4.5394,122.694,0.211577,0.0607923,0.227061,0.826667,0.269177,0.0812292
206,796.448,1,4.45202,23.9992,4.55816,122.347,0.214624,0.0599674,0.221312,0.87087,0.265119,0.0817771
207,798.831,1,4.42921,24.0527,4.60417,122.8,0.216237,0.0650157,0.215708,0.848819,0.264343,0.0845186
208,791.436,1,4.35215,23.9755,4.5787,129.538,0.230813,0.0633695,0.210247,0.827326,0.270545,0.0823785
209,796.858,1,4.33051,23.9219,4.54878,135.422,0.226346,0.0631547,0.204923,0.806378,0.271059,0.0814479
210,801.45,1,4.34013,24.0986,4.5455,127.477,0.23353,0.0625238,0.199734,0.861017,0.278412,0.0803173
211,792.847,1,4.42058,23.9746,4.57383,119.713,0.227617,0.0609407,0.198006,0.880162,0.275204,0.0782836
212,792.648,1,4.44143,23.9335,4.57134,119.469,0.233195,0.0593976,0.201281,0.857876,0.277555,0.0784363
213,799.823,1,4.46801,24.0383,4.50889,118.261,0.234405,0.0660634,0.233862,0.836154,0.270527,0.0799695
214,793.931,1,4.48713,24.3508,4.4956,113.188,0.22847,0.0643906,0.227941,0.871434,0.267272,0.0794249
215,793.36,1,4.49718,23.9063,4.64818,110.319,0.222685,0.0627602,0.222169,0.863836,0.274979,0.0777104
216,789.486,1,4.47631,23.9428,4.63107,116.269,0.226794,0.0611711,0.216702,0.841963,0.277531,0.0758175
217,791.708,1,4.4557,24.2483,4.67638,118.315,0.227372,0.0601174,0.211215,0.827588,0.270504,0.0789347
218,801.959,1,4.45728,24.2113,4.54336,116.22,0.228545,0.066821,0.205867,0.871688,0.269025,0.0819709
219,802.771,1,4.54613,24.3408,4.34938,115.274,0.222758,0.0729794,0.200655,0.849616,0.26888,0.0833798
220,804.687,1,4.58449,24.2443,4.34605,106.605,0.228523,0.0748284,0.209477,0.828104,0.272918,0.0814682
221,795.522,1,4.52681,24.0955,4.53003,110.448,0.233806,0.0740249,0.204646,0.808495,0.271754,0.0794053
222,790.805,1,4.55956,23.8983,4.64408,111.536,0.227886,0.0721506,0.199464,0.804419,0.264873,0.0827374
223,801.271,1,4.53735,24.0986,4.61577,113.787,0.222116,0.0703237,0.194413,0.786792,0.264157,0.0865536
224,796.933,1,4.52496,24.0475,4.61284,119.845,0.216492,0.0701144,0.200555,0.76687,0.265625,0.084362
225,797.239,1,4.48438,23.884,4.62586,111.599,0.214724,0.0704118,0.195476,0.833042,0.26613,0.082804
226,792.993,1,4.52799,23.7724,4.69831,118.779,0.220178,0.0690225,0.190527,0.819622,0.268726,0.0807074
227,797.277,1,4.5318,23.8707,4.69271,113.505,0.22096,0.0718903,0.193418,0.82203,0.276395,0.0786638
228,795.491,1,4.52488,23.9376,4.63617,109.631,0.221092,0.0810571,0.188521,0.879478,0.269396,0.0793854
229,796.843,1,4.59054,24.0317,4.61061,98.2172,0.23069,0.0790047,0.187665,0.908766,0.272297,0.0779706
230,792.158,1,4.62238,24.0196,4.64055,103.01,0.224848,0.0770043,0.187616,0.885756,0.266697,0.0796107
231,795.036,1,4.6376,23.9956,4.61304,94.2959,0.220988,0.0785207,0.182866,0.880412,0.27264,0.077595
232,796.679,1,4.68241,24.0566,4.62055,89.7454,0.223995,0.0765325,0.178235,0.908278,0.273987,0.0794346
233,796.906,1,4.65855,23.9895,4.54655,98.0647,0.223983,0.0756572,0.173722,0.88528,0.277017,0.079687
234,794.128,1,4.67617,23.7077,4.51151,96.2959,0.232085,0.0737415,0.169324,0.862864,0.273125,0.0808981
235,797.556,1,4.54736,23.7475,4.48191,102.498,0.226209,0.0797336,0.165036,0.844663,0.278206,0.0789819
236,791.372,1,4.59466,23.8415,4.48302,104.383,0.220481,0.0834942,0.160858,0.827285,0.27806,0.0775023
237,789.817,1,4.6039,23.9566,4.49755,106.485,0.214898,0.0813801,0.156785,0.806338,0.271622,0.0804106
238,789.217,1,4.63965,24.121,4.36548,101.551,0.229828,0.0793195,0.163497,0.785921,0.272677,0.0783746
239,786.769,1,4.6826,24.1432,4.33923,93.1499,0.227287,0.0773111,0.173663,0.805226,0.269542,0.0771211
240,789.191,1,4.63066,23.981,4.42283,98.0176,0.233473,0.0753535,0.184078,0.788591,0.277994,0.0760679
241,785.074,1,4.73326,23.9824,4.43618,95.4862,0.231274,0.0734455,0.182657,0.768623,0.270955,0.0776351
242,780.711,1,4.70577,23.9223,4.36796,97.4589,0.228171,0.0715859,0.178032,0.749161,0.272293,0.0765313
243,786.752,1,4.68435,24.0775,4.34961,98.7325,0.253664,0.0702121,0.175333,0.730192,0.270435,0.0777538
244,786.149,1,4.66647,24.1226,4.25632,102.188,0.247241,0.0684343,0.172938,0.711703,0.269152,0.0809923
245,790.446,1,4.63414,23.9459,4.31788,105.803,0.245442,0.0678192,0.168559,0.693682,0.272766,0.0811289
246,793.064,1,4.63102,24.1972,4.29286,107.44,0.245329,0.074224,0.164759,0.678552,0.277803,0.0790747
247,791.33,1,4.613,24.3982,4.27053,103.298,0.239117,0.0723446,0.160587,0.72253,0.275591,0.0798842
248,787.248,1,4.65352,24.2871,4.28397,97.6883,0.233063,0.0705128,0.162133,0.712652,0.276966,0.0791624
249,784.323,1,4.69094,24.2938,4.25485,94.8481,0.230257,0.0687274,0.158028,0.791446,0.274796,0.0783231
250,790.99,1,4.72693,24.3613,4.26597,91.7018,0.226204,0.0669872,0.156046,0.771406,0.271974,0.0814072
251,795.558,1,4.76246,24.4173,4.38557,91.5315,0.229592,0.0676411,0.166006,0.768893,0.267661,0.083216
252,798.176,1,4.71937,24.2046,4.36366,91.1408,0.224926,0.0680437,0.161802,0.781491,0.27281,0.0843081
253,790.934,1,4.75933,24.2766,4.38344,91.2444,0.230767,0.0663208,0.157705,0.761703,0.265902,0.084271
254,787.281,1,4.74557,24.1112,4.30373,89.817,0.229174,0.0646415,0.153712,0.754803,0.26495,0.0846724
255,790.629,1,4.77896,24.2644,4.3315,87.8233,0.230726,0.066616,0.155532,0.788576,0.2752,0.0825285
256,790.199,1,4.79974,24.0567,4.41094,88.0254,0.239959,0.0757497,0.152744,0.768608,0.272932,0.0804388
257,796.75,1,4.76171,23.8641,4.37619,87.2851,0.238642,0.0738317,0.153365,0.749147,0.267556,0.0849541
258,802.15,1,4.78698,24.0418,4.4261,83.9183,0.246524,0.0719622,0.169259,0.747144,0.271685,0.0847866
259,799.828,1,4.76375,24.4158,4.57497,89.6605,0.252052,0.0740268,0.191407,0.755191,0.266496,0.0826398
260,800.001,2,4.78205,24.1198,4.49525,86.6804,0.249767,0.0800329,0.186561,0.780961,0.266676,0.0817795
261,807.446,2,4.83172,24.0676,4.49162,81.3345,0.256274,0.0810538,0.237335,0.854896,0.270921,0.0797088
262,808.909,2,4.84926,24.2022,4.4033,70.9292,0.247793,0.083464,0.2316,0.959211,0.269349,0.0784216
263,798.153,2,4.87622,24.0048,4.41411,71.8888,0.243775,0.073201,0.230498,0.899352,0.270324,0.0763428
264,796.401,2,4.88817,24.0054,4.49095,65.2726,0.247773,0.0660784,0.233533,0.979905,0.272047,0.0749887
265,800.905,2,4.9064,23.7563,4.63938,62.3261,0.239463,0.0717531,0.245273,0.964468,0.277533,0.0742022
266,800.442,2,4.95753,23.6014,4.57903,60.8211,0.237177,0.0649432,0.2618,0.981564,0.27498,0.0751436
267,796.104,2,4.94694,23.7795,4.45636,60.5248,0.244263,0.0570877,0.23906,0.961629,0.277589,0.0753059
268,794.871,2,4.93541,23.7753,4.50602,59.1924,0.249001,0.0592571,0.24605,0.972504,0.278036,0.0735227
269,790.135,2,4.91058,23.773,4.44414,60.1856,0.247258,0.0612723,0.249734,0.976015,0.275208,0.0722633
270,794.316,2,4.89678,23.8549,4.61218,65.5953,0.249507,0.0633803,0.22627,0.943628,0.27005,0.0756058
271,802.222,2,4.91034,23.712,4.65067,67.157,0.248183,0.0608303,0.20869,0.926423,0.26965,0.0799472
272,803.25,2,4.89796,23.6791,4.65656,64.8585,0.254404,0.0598402,0.206683,0.973968,0.267742,0.0808696
273,799.347,2,4.87505,23.7272,4.51303,63.6201,0.252772,0.053361,0.211658,1.0004,0.268136,0.0808187
274,806.055,2,4.87294,23.7791,4.55108,64.964,0.24901,0.0507873,0.21539,1.00196,0.269257,0.0825243
275,793.575,2,4.88829,23.7062,4.59654,65.5052,0.247509,0.0474615,0.213298,1.00965,0.268238,0.081113
276,806.977,2,4.89456,23.7076,4.5893,60.1776,0.244131,0.0483213,0.220077,1.05444,0.274077,0.0806431
277,798.786,2,4.8871,23.7607,4.47267,61.9939,0.244981,0.0432381,0.221403,0.995675,0.271179,0.0825303
278,798.142,2,4.88878,23.7572,4.4617,65.9027,0.244268,0.0459018,0.2116,0.93254,0.26793,0.0836134
279,806.09,2,4.88429,23.7964,4.47305,66.9417,0.245857,0.0471755,0.215352,0.921585,0.268499,0.084301
280,805.879,2,4.85378,23.847,4.40316,69.4919,0.246767,0.0487128,0.22872,0.918824,0.271672,0.0828423
281,804.899,2,4.83143,23.8967,4.36005,70.4652,0.245765,0.0462579,0.237448,0.936459,0.27204,0.0828573
282,794.986,2,4.8355,23.9616,4.43943,72.6204,0.244635,0.0454582,0.234317,0.911022,0.269058,0.0828408
283,794.983,2,4.83871,24.0971,4.41885,72.9226,0.243346,0.0458608,0.230353,0.898314,0.269606,0.08206
284,792.04,2,4.85782,24.0783,4.42707,71.6082,0.244453,0.0443372,0.231533,0.908627,0.270181,0.0810501
285,793.414,2,4.86778,24.0474,4.413,71.1966,0.244638,0.0458726,0.238085,0.892082,0.270758,0.0799813
286,796.316,2,4.87464,24.04,4.40954,71.5572,0.244143,0.0472137,0.240107,0.891187,0.271916,0.0793888
287,797.308,2,4.88136,24.0543,4.44647,71.8914,0.243748,0.0471409,0.24749,0.878857,0.270347,0.0799176
288,801.173,2,4.87606,24.0678,4.41858,72.1937,0.241627,0.048528,0.249028,0.87537,0.269255,0.0805905
289,803.535,2,4.83713,24.0485,4.42786,74.2387,0.247011,0.0484036,0.242049,0.876559,0.269698,0.0812326
290,804.166,2,4.80414,24.0873,4.40992,76.4846,0.248824,0.0511235,0.23381,0.896487,0.270483,0.0809748
291,806.156,2,4.78798,24.0976,4.42476,76.9576,0.250436,0.0506913,0.233405,0.90984,0.270808,0.0813107
292,802.993,2,4.78198,24.1454,4.41811,76.4721,0.249881,0.0513358,0.229283,0.932787,0.270996,0.081155
293,798.113,2,4.77373,24.2068,4.38799,78.2314,0.248849,0.050945,0.222368,0.932736,0.271079,0.0812751
294,792.351,2,4.77576,24.1291,4.41571,78.5872,0.248075,0.0504762,0.218698,0.930138,0.271264,0.0808437
295,796.978,2,4.76659,24.1012,4.42856,78.602,0.250123,0.0512803,0.215497,0.930559,0.27221,0.0802537
296,795.222,2,4.74874,24.0711,4.41051,79.8851,0.251789,0.0521681,0.213164,0.918932,0.272193,0.079976
297,798.698,2,4.74516,24.0831,4.39331,80.6309,0.25209,0.0537414,0.212255,0.91171,0.272307,0.0797503
298,800.643,2,4.74544,24.0838,4.40322,80.7329,0.252477,0.0531556,0.214609,0.909461,0.272226,0.0799226
299,789.087,2,4.74748,24.0722,4.41825,81.0539,0.252449,0.0531083,0.212341,0.903297,0.272788,0.0793921
300,784.18,2,4.74722,24.0678,4.43565,81.4711,0.250624,0.0530025,0.209287,0.904831,0.272162,0.0790914
301,783.264,2,4.74614,24.113,4.41818,81.6996,0.250516,0.0526286,0.208609,0.904056,0.272377,0.0785218
302,789.011,2,4.74743,24.1362,4.41794,81.613,0.249606,0.052757,0.208302,0.905904,0.272025,0.078384
303,794.879,2,4.75469,24.1183,4.40333,80.5341,0.25014,0.0538094,0.204837,0.912523,0.272095,0.078292
304,797.617,2,4.75894,24.1606,4.40854,80.3068,0.251392,0.0536742,0.203594,0.908113,0.271363,0.0787718
305,796.618,2,4.76657,24.167,4.42217,79.9486,0.252508,0.0539659,0.20483,0.908252,0.271078,0.0787717
306,788.943,2,4.76914,24.1875,4.41151,79.9902,0.252191,0.0539947,0.203642,0.905667,0.270888,0.078734
307,790.992,2,4.77053,24.1757,4.41175,79.7609,0.252616,0.0542684,0.20213,0.904479,0.271129,0.0785887
308,800.164,2,4.77222,24.1771,4.41862,79.5502,0.254017,0.0546592,0.20175,0.902167,0.271271,0.078667
309,790.407,2,4.77205,24.1756,4.42968,79.4507,0.255176,0.0547019,0.199676,0.901936,0.271099,0.0786651
310,794.666,2,4.76912,24.1647,4.42669,79.7127,0.256023,0.0547021,0.199316,0.90127,0.271162,0.0786611
311,790.674,2,4.76779,24.1623,4.42779,79.7955,0.256142,0.0547063,0.199382,0.901725,0.271082,0.0786417
312,792.69,2,4.7655,24.1566,4.42791,79.9989,0.256286,0.0547804,0.198842,0.902318,0.271039,0.0786467
313,791.146,2,4.76389,24.154,4.43119,80.1265,0.256514,0.0547638,0.198128,0.902572,0.270999,0.0786685
314,793.409,2,4.76215,24.1561,4.43067,80.1911,0.256798,0.0546345,0.197566,0.903822,0.271052,0.0786816
315,796.043,2,4.75937,24.1557,4.43108,80.3372,0.256753,0.0544373,0.19719,0.905001,0.271089,0.0787389
316,806.174,2,4.75787,24.1521,4.42959,80.4434,0.256926,0.0546258,0.197597,0.906203,0.271069,0.0787507
317,810.316,2,4.7566,24.1458,4.42858,80.3922,0.257062,0.0547152,0.198272,0.908461,0.271156,0.0787522
318,797.787,2,4.75642,24.1426,4.42913,80.2741,0.257304,0.0547378,0.198285,0.90963,0.271119,0.0787569
319,803.986,2,4.75585,24.1397,4.42863,80.2693,0.257408,0.0547899,0.198078,0.910553,0.27113,0.0788063
320,803.882,2,4.75415,24.1426,4.42939,80.4185,0.257666,0.0548235,0.19845,0.910555,0.271109,0.0788371
321,792.875,2,4.75257,24.1446,4.43032,80.5335,0.258034,0.0546731,0.198887,0.910417,0.271079,0.078825
322,797.628,2,4.75212,24.1397,4.42954,80.5745,0.258118,0.0548075,0.199079,0.910649,0.271058,0.0788052
323,798.402,2,4.75101,24.1422,4.42859,80.6976,0.258414,0.0548547,0.199121,0.910038,0.271036,0.0788179
324,793.039,2,4.75037,24.141,4.42725,80.8022,0.258536,0.0549081,0.199205,0.909375,0.27117,0.0787547
325,790.075,2,4.7493,24.1384,4.42874,80.9287,0.258659,0.0549523,0.198987,0.908425,0.271211,0.0787225
326,793.498,2,4.74898,24.1357,4.42885,81.009,0.258613,0.0550159,0.198551,0.908398,0.271182,0.078738
327,789.115,2,4.74846,24.1337,4.43078,81.0737,0.258549,0.0548749,0.198716,0.908676,0.271253,0.0787019
328,792.563,2,4.74743,24.1341,4.43351,81.1533,0.258543,0.0548095,0.199006,0.908934,0.271213,0.0786952
329,787.764,2,4.74578,24.133,4.43151,81.3243,0.258304,0.0547768,0.198829,0.908645,0.271249,0.0786752
330,793.183,2,4.74429,24.1332,4.43117,81.4958,0.257942,0.0548141,0.19836,0.908591,0.271268,0.0786983
331,796.348,2,4.74247,24.1367,4.43234,81.7003,0.257714,0.0550026,0.197924,0.908432,0.271275,0.0787055
332,791.306,2,4.74082,24.1357,4.43344,81.8856,0.25743,0.0550216,0.197457,0.907903,0.27132,0.0787167
333,799.992,2,4.73947,24.1335,4.43553,82.0495,0.25711,0.0552313,0.197584,0.907114,0.271341,0.0787159
334,782.962,2,4.73839,24.1323,4.43703,82.1884,0.256764,0.0552036,0.197647,0.907149,0.271274,0.0786875
335,796.101,2,4.73839,24.1305,4.43842,82.1812,0.256525,0.0553122,0.197697,0.907809,0.271221,0.0786897
336,791.355,2,4.73903,24.1305,4.43848,82.057,0.256324,0.0553808,0.197539,0.909039,0.271208,0.0786655
337,797.767,2,4.73957,24.1316,4.43997,81.995,0.256172,0.0553538,0.197436,0.910264,0.271212,0.0786858
338,804.667,2,4.73999,24.1301,4.44174,81.9617,0.256017,0.0554749,0.197237,0.91131,0.271285,0.0786998
339,804.256,2,4.73975,24.129,4.4429,82.0164,0.255978,0.0555652,0.197077,0.911803,0.271328,0.0787247
340,801.425,2,4.73978,24.1294,4.44491,82.0019,0.255919,0.0555659,0.197256,0.912073,0.271259,0.0787686
341,795.159,2,4.7399,24.1273,4.44743,82.0262,0.255983,0.0556152,0.197221,0.91243,0.27124,0.0787609
342,801.251,2,4.74008,24.1281,4.44912,82.0704,0.256171,0.0555994,0.197478,0.911939,0.27118,0.0787976
343,799.072,2,4.74021,24.1272,4.44914,82.0292,0.256095,0.0557339,0.197587,0.91256,0.27117,0.0787834
344,806.536,2,4.74119,24.1239,4.45045,81.9159,0.25592,0.0558426,0.19784,0.913225,0.271161,0.0788061
345,804.658,2,4.74175,24.1241,4.45246,81.8352,0.255792,0.055818,0.198157,0.914161,0.271133,0.078842
346,799.331,2,4.74172,24.1249,4.45344,81.8412,0.255794,0.0558538,0.198058,0.914277,0.271185,0.0788443
347,798.572,2,4.74136,24.1252,4.45534,81.8871,0.255879,0.0558714,0.198201,0.914205,0.271183,0.0788465
348,803.424,2,4.74091,24.1255,4.45705,81.9382,0.255971,0.0558399,0.198449,0.914668,0.271171,0.0788708
349,798.847,2,4.74048,24.1283,4.45649,81.9875,0.255875,0.0558466,0.198562,0.914522,0.271154,0.0788906
350,798.744,2,4.74054,24.1298,4.45672,82.0064,0.255717,0.0558761,0.198534,0.914326,0.271128,0.0789189
351,798.81,2,4.74026,24.1327,4.45706,82.0655,0.25559,0.0558703,0.198529,0.914781,0.271051,0.0789586
352,799.155,2,4.73945,24.1356,4.4564,82.1742,0.255494,0.0559306,0.198373,0.915057,0.271158,0.0789418
353,792.979,2,4.73815,24.1373,4.45566,82.3361,0.255394,0.0559518,0.19813,0.914579,0.271153,0.0789525
354,790.041,2,4.73653,24.1405,4.45526,82.5196,0.255299,0.0559471,0.198012,0.91451,0.271209,0.0789253
355,793.666,2,4.735,24.1403,4.45403,82.6749,0.255124,0.0559528,0.197934,0.914203,0.271277,0.0789131
356,793.253,2,4.73394,24.1397,4.4525,82.7792,0.254958,0.0559474,0.197685,0.913601,0.271265,0.0789383
357,790.047,2,4.73352,24.1401,4.45305,82.8499,0.254774,0.0559029,0.197488,0.913732,0.271244,0.0789491
358,806.14,2,4.73308,24.1396,4.45265,82.937,0.254761,0.0558783,0.197578,0.913734,0.271329,0.0789709
359,798.486,2,4.73243,24.1399,4.45291,83.0133,0.254806,0.0558137,0.197487,0.914335,0.271377,0.0789791
360,799.318,2,4.73221,24.138,4.45271,83.0467,0.254856,0.0558276,0.197697,0.914082,0.271447,0.0789606
361,797.606,2,4.73202,24.1398,4.45072,83.0877,0.254898,0.055811,0.197907,0.913656,0.271514,0.0789447
362,809.359,2,4.73186,24.1424,4.44968,83.1334,0.254907,0.0558693,0.198364,0.91408,0.271535,0.0789507
363,809.419,2,4.7316,24.1419,4.44923,83.1286,0.254746,0.0558425,0.198793,0.914887,0.271547,0.0789809
364,801.451,2,4.73142,24.1395,4.44854,83.1232,0.254646,0.0557766,0.19899,0.91499,0.271614,0.0789895
365,800.391,2,4.7317,24.1402,4.44956,83.1569,0.254521,0.0557241,0.199181,0.9148,0.271609,0.079017
366,801.242,2,4.73164,24.139,4.44992,83.1788,0.254478,0.0557227,0.199228,0.914499,0.27159,0.079047
367,800.437,2,4.73164,24.138,4.44991,83.2067,0.254396,0.0557198,0.19906,0.913859,0.271636,0.0790732
368,802.842,2,4.73149,24.1364,4.44907,83.203,0.254291,0.05574,0.199014,0.913249,0.271702,0.0790918
369,796.57,2,4.73156,24.1353,4.44761,83.146,0.25417,0.0556898,0.199023,0.913416,0.271804,0.0790774
370,794.065,2,4.73209,24.1338,4.44755,83.0611,0.254058,0.05565,0.198852,0.913789,0.271826,0.0790821
371,796.506,2,4.73285,24.134,4.44784,82.9735,0.253934,0.0556471,0.19883,0.913982,0.271828,0.0790885
372,794.55,2,4.73381,24.1327,4.44886,82.8863,0.253892,0.055633,0.198766,0.91397,0.271819,0.0790944
373,797.485,2,4.73487,24.1322,4.44827,82.7887,0.253881,0.0556016,0.19875,0.914111,0.271873,0.0790902
374,792.976,2,4.73585,24.1299,4.44878,82.7062,0.253854,0.0555561,0.198696,0.913961,0.271821,0.0791101
375,788.116,2,4.73741,24.1306,4.44897,82.5663,0.253851,0.0555067,0.198428,0.914293,0.271828,0.0791015
376,794.408,2,4.73794,24.1306,4.45015,82.5054,0.253885,0.055454,0.198267,0.91459,0.271785,0.0791236
377,800.938,2,4.73816,24.1302,4.45159,82.4949,0.253855,0.0554887,0.198254,0.914801,0.271717,0.0791538
378,789.544,2,4.73899,24.1303,4.45117,82.4024,0.253793,0.0554314,0.198087,0.915167,0.271704,0.0791549
379,787.623,2,4.73984,24.1298,4.45263,82.3508,0.253781,0.0553793,0.198149,0.915058,0.271674,0.0791439
380,798.526,2,4.74014,24.129,4.45244,82.2638,0.253779,0.0553529,0.19825,0.915766,0.271697,0.0791375
381,795.938,2,4.74054,24.1278,4.452,82.2139,0.253739,0.0553433,0.197958,0.916128,0.271722,0.0791468
